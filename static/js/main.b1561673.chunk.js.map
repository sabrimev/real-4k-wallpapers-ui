{"version":3,"sources":["react-file-upload.js","SemanticFileUpload.js","App.js","serviceWorker.js","index.js"],"names":["React","Component","require","axios","onPost","reply","d","addYears","Date","receivedCategories","format","SemanticFileUpload","props","onFormSubmit","e","preventDefault","console","log","state","categories","length","file4K","fileHD","fileThumbnail","password","error","Error","setState","statusCode","submitting","window","scrollTo","fileUploadFetch","isPremium","isActive","source","searchKeys","fileChange4K","target","files","name","toLowerCase","includes","color4K","fileName4K","fileChangeHD","colorHD","fileNameHD","fileChangeThumbnail","colorThumbnail","imagePreview","URL","createObjectURL","fileNameThumbnail","getCategoryFetch","a","async","fetch","method","redirect","then","response","text","result","categoryDownloaded","sortedCategoryList","JSON","parse","_","sortBy","catch","file4k","formData","FormData","append","map","cat","Headers","body","status","message","onPasswordChange","value","onSourceChange","onSearchKeysChange","onPremiumChange","onActiveChange","handleCategoryClick","event","data","i","checked","id","array","index","indexOf","splice","isUploading","this","panes","menuItem","render","Tab","Pane","attached","className","loading","Progress","style","marginTop","percent","success","progress","active","Message","Form","onSubmit","Group","widths","Field","width","Checkbox","label","fluid","onChange","Input","placeholder","Button","color","as","htmlFor","type","animated","Content","visible","hidden","readOnly","Image","src","size","categoryName","v","defaultChecked","Segment","padding","vertical","Divider","horizontal","menu","pointing","App","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b1561673.chunk.js","sourcesContent":["import React from 'react'\nimport axios, { post } from 'axios';\n\nclass SimpleReactFileUpload extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state ={\n      file:null\n    }\n    this.onFormSubmit = this.onFormSubmit.bind(this)\n    this.onChange = this.onChange.bind(this)\n    this.fileUpload = this.fileUpload.bind(this)\n  }\n  onFormSubmit(e){\n    e.preventDefault() // Stop form submit\n    this.fileUpload(this.state.file).then((response)=>{\n      console.log(response.data);\n    })\n  }\n  onChange(e) {\n    this.setState({file:e.target.files[0]})\n  }\n  fileUpload(file){\n    const url = 'http://example.com/file-upload';\n    const formData = new FormData();\n    formData.append('file',file)\n    const config = {\n        headers: {\n            'content-type': 'multipart/form-data'\n        }\n    }\n    return  post(url, formData,config)\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.onFormSubmit}>\n        <h1>File Upload</h1>\n        <input type=\"file\" onChange={this.onChange} />\n        <button type=\"submit\">Upload</button>\n      </form>\n   )\n  }\n}\n\n\n\nexport default SimpleReactFileUpload\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n    Button,\n    Segment,\n    Divider,\n    Tab,\n    Table,\n    Message,\n    Checkbox,\n    Form,\n    Icon,\n    Input,\n    Dropdown,\n    Dimmer,\n    Loader,\n    Label,\n    Progress,\n    Image\n} from \"semantic-ui-react\";\n\nimport { _ } from \"underscore\";\n\nimport addYears from \"date-fns/add_years\";\nimport format from \"date-fns/format\";\n\nimport \"./App.css\";\nimport axios from \"axios\";\nconst MockAdapter = require(\"axios-mock-adapter\");\nconst mock = new MockAdapter(axios);\n\nmock.onPost(\"/file/upload/enpoint\").reply(200);\n\nlet d = addYears(new Date(\"2015-01-01T00:00\"), 1);\nlet f = format(d, \"YYYY-MM-DD\");\n\nvar receivedCategories = [];\n\nexport default class SemanticFileUpload extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            imagePreview: null,\n            categories: [],\n            categoryDownloaded: false,\n            file4K: null,\n            fileHD: null,\n            fileThumbnail: null,\n            fileName4K: \"\",\n            fileNameHD: \"\",\n            fileNameThumbnail: \"\",\n            isPremium: false,\n            isActive: false,\n            password: '',\n            source: '',\n            searchKeys: '',\n            isUploading: false,\n            statusCode: \"\",\n            submitting: false,\n            color4K: '',\n            colorHD: '',\n            colorThumbnail: '',\n        };\n        this.getCategoryFetch();// get categories\n    }\n\n    onFormSubmit = e => {\n        e.preventDefault(); // Stop form submit\n        console.log(\"form submit\");\n\n\n        if (this.state.categories.length === 0\n            || this.state.file4K == null\n            || this.state.fileHD == null\n            || this.state.fileThumbnail == null\n            || this.state.password == \"\") {\n            console.error(Error('Provide all the information'));\n            this.setState({ statusCode: 404, submitting: false }, () => {\n                console.log(\n                    \"Provide all the information\",\n                    this.state.statusCode\n                );\n            });\n            console.log(\"form submit canceled\");\n            window.scrollTo(0, 0);\n            return;\n        }\n\n        this.fileUploadFetch(this.state.file4K,\n            this.state.fileHD,\n            this.state.fileThumbnail,\n            this.state.isPremium,\n            this.state.isActive,\n            this.state.password,\n            this.state.source,\n            this.state.searchKeys,\n            this.state.categories);\n\n        this.setState({ submitting: true })\n        window.scrollTo(0, 0);\n    };\n\n    fileChange4K = e => {\n        if(e.target.files[0].name.toLowerCase().includes('4k')){\n            this.setState({ color4K: 'green'})\n        } else {\n            this.setState({ color4K: 'red'})\n        }\n        this.setState(\n            { file4K: e.target.files[0], fileName4K: e.target.files[0].name },\n            () => {\n                console.log(\n                    \"File chosen --->\",\n                    this.state.file4K,\n                    console.log(\"File name  --->\", this.state.fileName4K)\n                );\n            }\n        );\n    };\n\n    fileChangeHD = e => {\n        if(e.target.files[0].name.toLowerCase().includes('hd')){\n            this.setState({ colorHD: 'green'})\n        } else {\n            this.setState({ colorHD: 'red'})\n        }\n        this.setState(\n            { fileHD: e.target.files[0], fileNameHD: e.target.files[0].name },\n            () => {\n                console.log(\n                    \"File chosen --->\",\n                    this.state.fileHD,\n                    console.log(\"File name  --->\", this.state.fileNameHD)\n                );\n            }\n        );\n    };\n\n    fileChangeThumbnail = e => {\n        if(e.target.files[0].name.toLowerCase().includes('thumbnail')){\n            this.setState({ colorThumbnail: 'green'})\n        } else {\n            this.setState({ colorThumbnail: 'red'})\n        }\n        this.setState(\n            { imagePreview: URL.createObjectURL(e.target.files[0]), fileThumbnail: e.target.files[0], fileNameThumbnail: e.target.files[0].name },\n            () => {\n                console.log(\n                    \"File chosen --->\",\n                    this.state.fileThumbnail,\n                    console.log(\"File name  --->\", this.state.fileNameThumbnail)\n                );\n            }\n        );\n    };\n\n    getCategoryFetch = async () => {\n        var requestOptions = {\n            method: 'GET',\n            redirect: 'follow'\n        };\n\n        fetch(\"https://real4k.westeurope.cloudapp.azure.com/wallpaper/getAllCategory\", requestOptions)\n            .then(response => response.text())\n            .then(result => {\n                console.log(result)\n\n                this.setState({ categoryDownloaded: true })\n                var sortedCategoryList = JSON.parse(result)\n                receivedCategories = _.sortBy(sortedCategoryList, 'categoryName');\n\n                this.setState(this.state)\n            })\n            .catch(error => console.log('error', error));\n    }\n\n\n    fileUploadFetch = async (file4k,\n        fileHD,\n        fileThumbnail,\n        isPremium,\n        isActive,\n        password,\n        source,\n        searchKeys,\n        categories) => {\n        const formData = new FormData();\n        formData.append('Image4k', file4k);\n        formData.append('ImageHD', fileHD);\n        formData.append('ImageThumbnail', fileThumbnail);\n\n        formData.append('Password', password);\n        formData.append('IsPremium', isPremium);\n        formData.append('IsActive', isActive);\n        formData.append('Source', source);\n        formData.append('SearchKeys', searchKeys);\n\n        categories.map(cat => formData.append('Categories', cat))\n\n        console.log('Sending data..')\n\n        try {\n            var myHeaders = new Headers();\n            myHeaders.append(\"Content-Type\", \"application/json\");\n\n            var requestOptions = {\n                method: 'POST',\n                body: formData\n            };\n\n            fetch(\"https://real4k.westeurope.cloudapp.azure.com/wallpaper/UploadImage\", requestOptions)\n                .then(response => {\n                    console.log(response);\n                    console.log(response.status);\n                    //this.setState({ categories: []});//Clear state\n                    this.setState({ statusCode: response.status, submitting: false }, () => {\n                        console.log(\n                            \"This is the response status code --->\",\n                            this.state.statusCode\n                        );\n                    });\n                    if (response.status === 200) {\n                        this.setState(\n                            {\n                                submitting: false,\n                                isPremium: false,\n                                file4K: null,\n                                fileHD: null,\n                                fileThumbnail: null,\n                                fileName4K: \"\",\n                                fileNameHD: \"\",\n                                fileNameThumbnail: \"\",\n                                searchKeys: \"\",\n                                categories: []\n                            });\n                    }\n\n                    return response.text()\n                })\n                .then(result => console.log(result))\n                .catch(error => {\n                    console.log('error', error)\n                    this.setState({ statusCode: 500, submitting: false }, () => {\n                        console.log(\n                            \"This is the response status code-err --->\",\n                            this.state.statusCode\n                        );\n                    });\n                });\n\n        } catch (error) {\n            console.error(Error(`Error uploading file ${error.message}`));\n            this.setState({ statusCode: 500, submitting: false }, () => {\n                console.log(\n                    \"This is the response status code-err2 --->\",\n                    this.state.statusCode\n                );\n            });\n        }\n    };\n\n    onPasswordChange = e => {\n        console.log('onPasswordChange')\n        this.setState({\n            password: e.target.value\n        })\n        console.log(this.state.password)\n    }\n\n    onSourceChange = e => {\n        console.log('onSourceChange')\n        this.setState({\n            source: e.target.value\n        })\n\n        console.log(this.state.source)\n    }\n\n    onSearchKeysChange = e => {\n        console.log('onSearchKeysChange')\n        this.setState({\n            searchKeys: e.target.value\n        })\n\n        console.log(this.state.searchKeys)\n    }\n\n    onPremiumChange = e => {\n        console.log('onPremiumChange : ' + !this.state.isPremium)\n        this.setState({\n            isPremium: !this.state.isPremium\n        })\n    }\n\n    onActiveChange = e => {\n        console.log('onActiveChange : ' + !this.state.isActive)\n        this.setState({\n            isActive: !this.state.isActive\n        })\n    }\n\n    handleCategoryClick = (event, data, i) => {\n        console.log(data)\n        if (data.checked && !this.state.categories.includes(data.id)) {\n            this.setState({\n                categories: [...this.state.categories, data.id]\n            })\n        } else {\n            if (this.state.categories.includes(data.id)) {\n\n                var array = [...this.state.categories]; // make a separate copy of the array\n                var index = array.indexOf(data.id)\n                if (index !== -1) {\n                    array.splice(index, 1);\n                    this.setState({ categories: array });\n                }\n            }\n        }\n        console.log('selected categories except last one: ' + this.state.categories);\n    };\n\n    render() {\n        const { statusCode } = this.state;\n        const panes = [\n            {\n                menuItem: \"Upload Walpaper\",\n                render: () => (\n                    <Tab.Pane attached={false} className=\"Testo\" loading={this.state.submitting}>\n\n\n                        {statusCode && statusCode === 200 ? (\n                            <Progress\n                                style={{ marginTop: \"20px\" }}\n                                percent={100}\n                                success\n                                progress\n                            >\n                                File Upload Success\n                            </Progress>\n                        ) : statusCode && statusCode === 500 ? (\n                            <Progress\n                                style={{ marginTop: \"20px\" }}\n                                percent={0}\n                                error\n                                active\n                                progress\n                            >\n                                File Upload Failed\n                            </Progress>\n                        ) : statusCode && statusCode === 401 ? (\n                            <Progress\n                                style={{ marginTop: \"20px\" }}\n                                percent={0}\n                                error\n                                active\n                                progress\n                            >\n                                File Upload Failed: Wrong password\n                            </Progress>\n                        ) : statusCode && statusCode === 404 ? (\n                            <Progress\n                                style={{ marginTop: \"20px\" }}\n                                percent={0}\n                                error\n                                active\n                                progress\n                            >\n                                Provide all the information\n                            </Progress>\n                        ) : null}\n\n\n                        <Message>Provide all the information below</Message>\n                        <Form onSubmit={this.onFormSubmit}>\n                            <Form.Group widths='equal'>\n                                <Form.Field width={7}>\n\n                                    <Form.Checkbox\n                                        label='Premium wallpaper'\n                                        checked={this.state.isPremium}\n                                        fluid\n                                        value={this.state.isPremium}\n                                        onChange={this.onPremiumChange}\n                                    />\n\n                                    <br />\n\n                                    <Form.Checkbox\n                                        label='Activate'\n                                        checked={this.state.isActive}\n                                        fluid\n                                        value={this.state.isActive}\n                                        onChange={this.onActiveChange}\n                                    />\n\n                                    <br />\n\n                                    <Form.Input\n                                        fluid\n                                        placeholder=\"Password\"\n                                        value={this.state.password}\n                                        onChange={this.onPasswordChange}\n                                    />\n\n                                    <br />\n\n                                    <Form.Input\n                                        fluid\n                                        placeholder=\"Source\"\n                                        value={this.state.source}\n                                        onChange={this.onSourceChange}\n                                    />\n\n                                    <br />\n\n                                    <Form.Input\n                                        fluid\n                                        placeholder=\"Search Keys - Max 500 word\"\n                                        value={this.state.searchKeys}\n                                        onChange={this.onSearchKeysChange}\n                                    />\n\n                                    <br />\n\n                                    <Form.Group widths='equal'>\n                                        <Button color={this.state.color4K} fluid as=\"label\" htmlFor=\"file4K\" type=\"button\" animated=\"fade\">\n                                            <Button.Content visible>\n                                            </Button.Content>\n                                            <Button.Content >Choose 4K Wallpaper</Button.Content>\n                                        </Button>\n                                        <input\n                                            type=\"file\"\n                                            id=\"file4K\"\n                                            hidden\n                                            onChange={this.fileChange4K}\n                                        />\n                                        <Form.Input\n                                            fluid\n                                            placeholder=\"file4K\"\n                                            readOnly\n                                            value={this.state.fileName4K}\n                                        />\n                                    </Form.Group>\n\n\n                                    <Form.Group widths='equal'>\n                                        <Button color={this.state.colorHD} fluid as=\"label\" htmlFor=\"fileHD\" type=\"button\" animated=\"fade\">\n                                            <Button.Content >Choose HD Wallpaper</Button.Content>\n                                        </Button>\n                                        <input\n                                            type=\"file\"\n                                            id=\"fileHD\"\n                                            hidden\n                                            onChange={this.fileChangeHD}\n                                        />\n                                        <Form.Input\n                                            fluid\n                                            placeholder=\"fileHD\"\n                                            readOnly\n                                            value={this.state.fileNameHD}\n                                        />\n                                    </Form.Group>\n\n\n                                    <Form.Group widths='equal'>\n                                        <Button color={this.state.colorThumbnail} fluid as=\"label\" htmlFor=\"fileThumbnail\" type=\"button\" animated=\"fade\">\n                                            <Button.Content >Choose Thumbnail Wallpaper</Button.Content>\n                                        </Button>\n                                        <input\n                                            type=\"file\"\n                                            id=\"fileThumbnail\"\n                                            hidden\n                                            onChange={this.fileChangeThumbnail}\n                                        />\n\n                                        <Form.Input\n                                            fluid\n                                            placeholder=\"fileThumbnail\"\n                                            readOnly\n                                            value={this.state.fileNameThumbnail}\n                                        />\n\n                                    </Form.Group>\n\n                                    <Image src={this.state.imagePreview} size='small' />\n\n                                    <Button style={{ marginTop: \"20px\" }} type=\"submit\">\n                                        Upload\n                                    </Button>\n                                </Form.Field>\n                                <Form.Field width={2}>\n                                    {this.state.categoryDownloaded && receivedCategories.map((cat, i) => {\n                                        if(i <= 21)\n                                        return (\n                                            <Form.Checkbox\n                                                id={cat.id + ''}\n                                                label={cat.categoryName}\n                                                onChange={(e, v) => this.handleCategoryClick(e, v, i)}\n                                                name={cat.categoryName}\n                                                defaultChecked={false}\n                                                checked={this.state.categories.length === 0 ? false : null}\n                                            />\n                                        );\n                                        return <div></div>\n                                    })}\n                                </Form.Field>\n                                <Form.Field width={6}>\n                                    {this.state.categoryDownloaded && receivedCategories.map((cat, i) => {\n                                        if(i > 21)\n                                        return (\n                                            <Form.Checkbox\n                                                id={cat.id + ''}\n                                                label={cat.categoryName}\n                                                onChange={(e, v) => this.handleCategoryClick(e, v, i)}\n                                                name={cat.categoryName}\n                                                defaultChecked={false}\n                                                checked={this.state.categories.length === 0 ? false : null}\n                                            />\n                                        );\n                                        return <div></div>\n                                    })}\n                                </Form.Field>\n                            </Form.Group>\n                        </Form>\n                    </Tab.Pane>\n                )\n            }\n        ];\n        return (\n            <Segment style={{ padding: \"1em 1em\" }} vertical>\n                <Divider horizontal>REAL 4K WALLPAPERS FILE UPLOAD SERVICE</Divider>\n                <Tab menu={{ pointing: true }} panes={panes} />\n            </Segment>\n        );\n    }\n}\n","import './App.css';\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\nimport SimpleReactFileUpload from './react-file-upload'\nimport FileUpload from './FileUpload'\nimport SemanticFileUpload from './SemanticFileUpload'\n\n\nfunction App() {\n  return (\n    <SemanticFileUpload />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}