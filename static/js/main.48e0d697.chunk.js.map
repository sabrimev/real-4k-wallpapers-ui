{"version":3,"sources":["react-file-upload.js","SemanticFileUpload.js","App.js","serviceWorker.js","index.js"],"names":["React","Component","require","axios","onPost","reply","d","addYears","Date","receivedCategories","format","SemanticFileUpload","props","onFormSubmit","e","preventDefault","console","log","fileUploadFetch","state","file4K","fileHD","fileThumbnail","isPremium","password","source","categories","setState","submitting","window","scrollTo","fileChange4K","target","files","fileName4K","name","fileChangeHD","fileNameHD","fileChangeThumbnail","fileNameThumbnail","getCategoryFetch","a","async","fetch","method","redirect","then","response","text","result","category","categoryDownloaded","JSON","parse","catch","error","file4k","formData","FormData","append","map","cat","Headers","body","status","statusCode","Error","message","onPasswordChange","value","onSourceChange","onPremiumChange","handleCategoryClick","event","data","i","checked","includes","id","array","index","indexOf","splice","isUploading","this","panes","menuItem","render","Tab","Pane","attached","className","loading","Message","Form","onSubmit","Field","Checkbox","label","fluid","onChange","Input","placeholder","Button","as","htmlFor","type","animated","Content","visible","hidden","readOnly","categoryName","v","defaultChecked","style","marginTop","Progress","percent","success","progress","active","Segment","padding","vertical","Divider","horizontal","menu","pointing","App","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.48e0d697.chunk.js","sourcesContent":["import React from 'react'\nimport axios, { post } from 'axios';\n\nclass SimpleReactFileUpload extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state ={\n      file:null\n    }\n    this.onFormSubmit = this.onFormSubmit.bind(this)\n    this.onChange = this.onChange.bind(this)\n    this.fileUpload = this.fileUpload.bind(this)\n  }\n  onFormSubmit(e){\n    e.preventDefault() // Stop form submit\n    this.fileUpload(this.state.file).then((response)=>{\n      console.log(response.data);\n    })\n  }\n  onChange(e) {\n    this.setState({file:e.target.files[0]})\n  }\n  fileUpload(file){\n    const url = 'http://example.com/file-upload';\n    const formData = new FormData();\n    formData.append('file',file)\n    const config = {\n        headers: {\n            'content-type': 'multipart/form-data'\n        }\n    }\n    return  post(url, formData,config)\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.onFormSubmit}>\n        <h1>File Upload</h1>\n        <input type=\"file\" onChange={this.onChange} />\n        <button type=\"submit\">Upload</button>\n      </form>\n   )\n  }\n}\n\n\n\nexport default SimpleReactFileUpload\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n    Button,\n    Segment,\n    Divider,\n    Tab,\n    Table,\n    Message,\n    Checkbox,\n    Form,\n    Icon,\n    Input,\n    Dropdown,\n    Dimmer,\n    Loader,\n    Label,\n    Progress\n} from \"semantic-ui-react\";\n\nimport addYears from \"date-fns/add_years\";\nimport format from \"date-fns/format\";\n\nimport \"./App.css\";\nimport axios from \"axios\";\nconst MockAdapter = require(\"axios-mock-adapter\");\nconst mock = new MockAdapter(axios);\n\nmock.onPost(\"/file/upload/enpoint\").reply(200);\n\nlet d = addYears(new Date(\"2015-01-01T00:00\"), 1);\nlet f = format(d, \"YYYY-MM-DD\");\n\nvar receivedCategories = [];\n\nexport default class SemanticFileUpload extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            categories: [],\n            categoryDownloaded: false,\n            file4K: null,\n            fileHD: null,\n            fileThumbnail: null,\n            fileName4K: \"\",\n            fileNameHD: \"\",\n            fileNameThumbnail: \"\",\n            isPremium: false,\n            password: '',\n            source: '',\n            isUploading: false,\n            statusCode: \"\",\n            submitting: false\n        };\n        this.getCategoryFetch();// get categories\n    }\n\n    onFormSubmit = e => {\n        e.preventDefault(); // Stop form submit\n        console.log(\"form submit\");\n        this.fileUploadFetch(this.state.file4K,\n            this.state.fileHD,\n            this.state.fileThumbnail,\n            this.state.isPremium,\n            this.state.password,\n            this.state.source,\n            this.state.categories);\n\n        this.setState({submitting: true})\n        window.scrollTo(0,0);\n    };\n\n    fileChange4K = e => {\n        this.setState(\n            { file4K: e.target.files[0], fileName4K: e.target.files[0].name },\n            () => {\n                console.log(\n                    \"File chosen --->\",\n                    this.state.file4K,\n                    console.log(\"File name  --->\", this.state.fileName4K)\n                );\n            }\n        );\n    };\n\n    fileChangeHD = e => {\n        this.setState(\n            { fileHD: e.target.files[0], fileNameHD: e.target.files[0].name },\n            () => {\n                console.log(\n                    \"File chosen --->\",\n                    this.state.fileHD,\n                    console.log(\"File name  --->\", this.state.fileNameHD)\n                );\n            }\n        );\n    };\n\n    fileChangeThumbnail = e => {\n        this.setState(\n            { fileThumbnail: e.target.files[0], fileNameThumbnail: e.target.files[0].name },\n            () => {\n                console.log(\n                    \"File chosen --->\",\n                    this.state.fileThumbnail,\n                    console.log(\"File name  --->\", this.state.fileNameThumbnail)\n                );\n            }\n        );\n    };\n\n    getCategoryFetch = async () => {\n        var requestOptions = {\n            method: 'GET',\n            redirect: 'follow'\n        };\n\n        fetch(\"https://wallpaper.westeurope.cloudapp.azure.com/wallpaper/getAllCategory\", requestOptions)\n            .then(response => response.text())\n            .then(result => {\n                console.log(result)\n                this.setState({ category: result, categoryDownloaded: true })\n                receivedCategories = JSON.parse(result)\n                this.setState(this.state)\n            })\n            .catch(error => console.log('error', error));\n    }\n\n    fileUploadFetch = async (file4k,\n        fileHD,\n        fileThumbnail,\n        isPremium,\n        password,\n        source,\n        categories) => {\n        const formData = new FormData();\n        formData.append('Image4k', file4k);\n        formData.append('ImageHD', fileHD);\n        formData.append('ImageThumbnail', fileThumbnail);\n\n        formData.append('Password', password);\n        formData.append('IsPremium', isPremium);\n        formData.append('Source', source);\n\n        categories.map(cat => formData.append('Categories', cat))\n\n        console.log('Sending data..')\n\n        try {\n            var myHeaders = new Headers();\n            myHeaders.append(\"Content-Type\", \"application/json\");\n\n            var requestOptions = {\n                method: 'POST',\n                body: formData\n            };\n\n            fetch(\"https://wallpaper.westeurope.cloudapp.azure.com/wallpaper/UploadImage\", requestOptions)\n                .then(response => {\n                    console.log(response);\n                    console.log(response.status);\n                    //this.setState({ categories: []});//Clear state\n                    this.setState({ statusCode: response.status }, () => {\n                        console.log(\n                            \"This is the response status code --->\",\n                            this.state.statusCode\n                        );\n                    });\n                    this.setState({submitting: false})\n                    return response.text()\n                })\n                .then(result => console.log(result))\n                .catch(error => {\n                    console.log('error', error)\n                    this.setState({ statusCode: 500, submitting: false }, () => {\n                        console.log(\n                            \"This is the response status code-err --->\",\n                            this.state.statusCode\n                        );\n                    });\n                });\n\n        } catch (error) {\n            console.error(Error(`Error uploading file ${error.message}`));\n            this.setState({ statusCode: 500, submitting: false }, () => {\n                console.log(\n                    \"This is the response status code-err2 --->\",\n                    this.state.statusCode\n                );\n            });\n        }\n    };\n\n    onPasswordChange = e => {\n        console.log('onPasswordChange')\n        this.setState({\n            password: e.target.value\n        })\n        console.log(this.state.password)\n    }\n\n    onSourceChange = e => {\n        console.log('onSourceChange')\n        this.setState({\n            source: e.target.value\n        })\n\n        console.log(this.state.source)\n    }\n\n    onPremiumChange = e => {\n        console.log('onPremiumChange : ' + !this.state.isPremium)\n        this.setState({\n            isPremium: !this.state.isPremium\n        })\n    }\n\n    handleCategoryClick = (event, data, i) => {\n        console.log(data)\n        if (data.checked && !this.state.categories.includes(data.id)) {\n            this.setState({\n                categories: [...this.state.categories, data.id]\n            })\n        } else {\n            if (this.state.categories.includes(data.id)) {\n\n                var array = [...this.state.categories]; // make a separate copy of the array\n                var index = array.indexOf(data.id)\n                if (index !== -1) {\n                    array.splice(index, 1);\n                    this.setState({ categories: array });\n                }\n            }\n        }\n        console.log('selected categories except last one: ' + this.state.categories);\n    };\n\n    render() {\n        const { statusCode } = this.state;\n        const panes = [\n            {\n                menuItem: \"Import \",\n                render: () => (\n                    <Tab.Pane attached={false} className=\"Testo\" loading={this.state.submitting}>\n                        <Message>Provide all the information below</Message>\n                        <Form onSubmit={this.onFormSubmit}>\n                            <Form.Field>\n\n                                <Form.Checkbox\n                                    label='Premium wallpaper'\n                                    checked={this.state.isPremium}\n                                    fluid\n                                    value={this.state.isPremium}\n                                    onChange={this.onPremiumChange}\n                                />\n\n                                <Form.Input\n                                    fluid\n                                    placeholder=\"Password\"\n                                    value={this.state.password}\n                                    onChange={this.onPasswordChange}\n                                />\n\n\n\n                                <Form.Input\n                                    fluid\n                                    placeholder=\"Source\"\n                                    value={this.state.source}\n                                    onChange={this.onSourceChange}\n                                />\n\n                                <Button as=\"label\" htmlFor=\"file4K\" type=\"button\" animated=\"fade\">\n                                    <Button.Content visible>\n                                    </Button.Content>\n                                    <Button.Content >Choose 4K Wallpaper</Button.Content>\n                                </Button>\n                                <input\n                                    type=\"file\"\n                                    id=\"file4K\"\n                                    hidden\n                                    onChange={this.fileChange4K}\n                                />\n                                <Form.Input\n                                    fluid\n                                    placeholder=\"Use the above bar to browse your file system\"\n                                    readOnly\n                                    value={this.state.fileName4K}\n                                />\n\n\n                                <Button as=\"label\" htmlFor=\"fileHD\" type=\"button\" animated=\"fade\">\n                                    <Button.Content >Choose HD Wallpaper</Button.Content>\n                                </Button>\n                                <input\n                                    type=\"file\"\n                                    id=\"fileHD\"\n                                    hidden\n                                    onChange={this.fileChangeHD}\n                                />\n                                <Form.Input\n                                    fluid\n                                    placeholder=\"Use the above bar to browse your file system\"\n                                    readOnly\n                                    value={this.state.fileNameHD}\n                                />\n\n                                <Button as=\"label\" htmlFor=\"fileThumbnail\" type=\"button\" animated=\"fade\">\n                                    <Button.Content >Choose Thumbnail Wallpaper</Button.Content>\n                                </Button>\n                                <input\n                                    type=\"file\"\n                                    id=\"fileThumbnail\"\n                                    hidden\n                                    onChange={this.fileChangeThumbnail}\n                                />\n                                <Form.Input\n                                    fluid\n                                    placeholder=\"Use the above bar to browse your file system\"\n                                    readOnly\n                                    value={this.state.fileNameThumbnail}\n                                />\n\n\n                                <Message>Select Image categories</Message>\n                                {this.state.categoryDownloaded && receivedCategories.map((cat, i) => {\n                                    return (\n                                        <Form.Checkbox\n                                            id={cat.id + ''}\n                                            label={cat.id + '-' + cat.categoryName}\n                                            onChange={(e, v) => this.handleCategoryClick(e, v, i)}\n                                            name={cat.categoryName}\n                                            defaultChecked={false}\n                                        />\n                                    );\n                                })}\n\n\n\n\n\n                                <Button style={{ marginTop: \"20px\" }} type=\"submit\">\n                                    Upload\n                                </Button>\n                                {statusCode && statusCode === 200 ? (\n                                    <Progress\n                                        style={{ marginTop: \"20px\" }}\n                                        percent={100}\n                                        success\n                                        progress\n                                    >\n                                        File Upload Success\n                                    </Progress>\n                                ) : statusCode && statusCode === 500 ? (\n                                    <Progress\n                                        style={{ marginTop: \"20px\" }}\n                                        percent={0}\n                                        error\n                                        active\n                                        progress\n                                    >\n                                        File Upload Failed\n                                    </Progress>\n                                ) : statusCode && statusCode === 401 ? (\n                                    <Progress\n                                        style={{ marginTop: \"20px\" }}\n                                        percent={0}\n                                        error\n                                        active\n                                        progress\n                                    >\n                                        Wrong password\n                                    </Progress>\n                                ) : null}\n                            </Form.Field>\n                        </Form>\n                    </Tab.Pane>\n                )\n            }\n        ];\n        return (\n            <Segment style={{ padding: \"2em 1em\" }} vertical>\n                <Divider horizontal>REAL 4K WALLPAPERS FILE UPLOAD SERVICE</Divider>\n                <Tab menu={{ pointing: true }} panes={panes} />\n            </Segment>\n        );\n    }\n}\n","import './App.css';\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\nimport SimpleReactFileUpload from './react-file-upload'\nimport FileUpload from './FileUpload'\nimport SemanticFileUpload from './SemanticFileUpload'\n\n\nfunction App() {\n  return (\n    <SemanticFileUpload />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}